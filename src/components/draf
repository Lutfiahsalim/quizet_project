import React, { useState } from "react";
import {
  BrowserRouter as Router,
  Route,
  Routes,
  useNavigate,
} from "react-router-dom";
import { QuestionState, fetchQuizQuestion } from "./API";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPlay } from "@fortawesome/free-solid-svg-icons";

// Assets import
import assets_icon from "../src/img/t1.png";
import categoryQuiz from "../src/img/category.png";
import iconQuiz from "../src/img/searching.png";

// Style
import "./style/styles.scss";

// Components
import QuestionCard from "./components/QuestionCard";
import DifficultySelector from "./components/DifficultySelector";
import CategoricalSelector from "./components/CategorySelector";
import Footer from "./components/Footer";

export type AnswerObject = {
  question: string;
  answer: string;
  correct: boolean;
  correctAnswer: string;
};

const TOTAL_QUESTION = 10;

const App: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [questions, setQuestions] = useState<QuestionState[]>([]);
  const [number, setNumber] = useState(0);
  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);
  const [score, setScore] = useState(0);
  const [gameOver, setGameOver] = useState(true);
  
  const navigate = useNavigate();

  const StartTrivia = () => {
    setGameOver(false);
    navigate("/category");
  };

  const Difficulty = () => {
    navigate("/difficulty");
  };

  const fetchQuestions = async (difficulty: string) => {
    setLoading(true);
    setGameOver(false);

    try {
      const newQuestions = await fetchQuizQuestion(TOTAL_QUESTION, difficulty);
      setQuestions(newQuestions);
      setScore(0);
      setUserAnswers([]);
      setNumber(0);
      setLoading(false);
      navigate("/quiz");
    } catch (error) {
      console.error("Error fetching question", error);
    }
  };

  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {
    if (!gameOver && questions[number]) {
      const answer = e.currentTarget.value;
      const correct = questions[number].correct_answer === answer;
      if (correct) setScore((prev) => prev + 1);

      const answerObject = {
        question: questions[number].question,
        answer,
        correct,
        correctAnswer: questions[number].correct_answer,
      };
      setUserAnswers((prev) => [...prev, answerObject]);
    }
  };

  const nextQuestion = () => {
    const nextQuestion = number + 1;

    if (nextQuestion === TOTAL_QUESTION) {
      setGameOver(true);
    } else {
      setNumber(nextQuestion);
    }
  };

  return (
    <div className="App">
      <div className="navbar">
        <h1 className="navbar-title">QUIZet.</h1>
        <div className="nav-child">
          <ul>
            <li>
              <a href="#about-section">About</a>
            </li>
            <li>
              <a href="">Score</a>
            </li>
          </ul>
        </div>
      </div>

      <Routes>
        <Route
          path="/"
          element={
            <div className="container">
              <div className="content">
                <h1 className="quiz-name">Quizet</h1>
                <p className="quiz-description">
                  Take our quiz to assess your expertise and identify the strengths{" "}
                  <br />
                  and weaknesses in your knowledge base.
                </p>
              </div>
              <div className="icon-wrap">
                <img src={iconQuiz} alt="icon" />
              </div>
              {gameOver || userAnswers.length === TOTAL_QUESTION ? (
                <button className="start" onClick={StartTrivia}>
                  START QUIZ <FontAwesomeIcon icon={faPlay} />
                </button>
              ) : null}
              <div id="about-section">
                <div className="desc-top">
                  <h2 className="desc-left">QUIZet is a place to expertise our brain</h2>
                  <img src={assets_icon} alt="icon of Quizet" />
                </div>
                <div className="desc-bottom">
                  <h3>here is the category of quiz you could play</h3>
                  <img src={categoryQuiz} alt="BigCo Inc. logo" />
                </div>
              </div>
            </div>
          }
        />
        <Route
          path="/category"
          element={<CategoricalSelector setCategorical={Difficulty} />}
        />
        <Route
          path="/difficulty"
          element={<DifficultySelector setDifficulty={fetchQuestions} />}
        />
        <Route
          path="/quiz"
          element={
            !loading && questions[number] ? (
              <QuestionCard
                questionNr={number + 1}
                totalQuestions={TOTAL_QUESTION}
                question={questions[number].question}
                answers={questions[number].answers}
                userAnswer={userAnswers ? userAnswers[number] : undefined}
                callback={checkAnswer}
              />
            ) : (
              <p>Loading Questions...</p>
            )
          }
        />
      </Routes>

      {!gameOver && userAnswers.length === number + 1 && number !== TOTAL_QUESTION - 1 ? (
        <button className="next" onClick={nextQuestion}>
          Next Question
        </button>
      ) : null}
      <Footer />
    </div>
  );
};

export default App;
